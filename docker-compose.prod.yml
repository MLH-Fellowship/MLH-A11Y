version: "3" # version of docker-compose we want to use

services: 
  client:
    container_name: client
    # build represents where to find docker file (i.e. /app folder)
    build: app
    env_file:
      - .env
    depends_on: 
      - api
    networks: 
      - nginx_client
  api:
    container_name: flask-api
    # build represents where to find docker file (i.e. /api folder)
    build: api
    restart: always
    # pass environment variables from docker environment
    env_file:
      - .env
    depends_on:
      - db
    networks: 
      - nginx_api
      - api_db
  db:
    container_name: postgres-db
    image: postgres
    restart: always
    # Add persistence to postgres
    volumes:
      - my_database:/var/lib/postgresql/data
    env_file:
      - .env
    networks: 
      - api_db

  nginx:
    container_name: nginx
    image: jonasal/nginx-certbot:latest
    restart: unless-stopped
    env_file:
      - ./nginx-certbot.env
    ports:
      - 80:80
      - 443:443
    volumes:
      - nginx_secrets:/etc/letsencrypt
      - ./nginx/nginx-conf.conf:/etc/nginx/user_conf.d/default.conf:ro
    depends_on:
      - client
    networks: 
      - nginx_api
      - nginx_client

  # cadvisor:
  #   container_name: cadvisor
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   restart: unless-stopped
  #   ports: 
  #     - 8080:8080
  #   volumes:
  #     - /:/roots:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro

volumes:
  my_database:
  nginx_secrets:

# Extra layer of security
networks: 
  api_db:
  nginx_client:
  nginx_api:

#   nginx_secrets:
# We are no longer exposing 5432, but Flask is still able 
# to access the db since both images are in the same network.
# Now web container depends on db, so the first db container
# is started only when web container is started.
# 